version: '3'

services:
  website:
    env_file: .env
    container_name: "coding-blocks-website"
    build:
      context: website
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
        PORT: ${WEBSITE_PORT}
    environment:
      - 'PORT=${WEBSITE_PORT}'
      - REACT_SEARCH_ENGINE_TYPE=${REACT_SEARCH_ENGINE_TYPE}
      - REACT_APP_BASE_SEARCH_URL=${REACT_APP_BASE_SEARCH_URL}
      - REACT_APP_SEARCH_API_KEY=${REACT_APP_SEARCH_API_KEY}
      - REACT_APP_SEARCH_API_SECRET=${REACT_APP_SEARCH_API_SECRET}
    ports:
      - '${WEBSITE_PORT}:${WEBSITE_PORT}'
    networks:
      - codingblocks
    restart: 'always'
    command: npm start
  api:
    container_name: "coding-blocks-api"
    build:
      context: qit-api
      dockerfile: Dockerfile-ruby
    command: bundle exec rails s -p 3005 -b '0.0.0.0'
    networks:
      - codingblocks
    ports:
      - "3005:3005"
    #env_file: # You need a .env for non-dev scenario
    #  - ./qit-api/config/.env
    environment:
      - 'DOCKER=true'
      - 'QIT_API_DATABASE_USERNAME=postgres'
      - 'QIT_API_DATABASE_PASSWORD='
      - 'QIT_API_DATABASE_NAME=postgres'
      - 'QIT_API_DATABASE_HOST=db'
      - 'QIT_API_SECRET=QITROCKS!'
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.2.0
    environment:
      - node.name=es01
      - cluster.initial_master_nodes=es01
      - ELASTIC_PASSWORD=QITROCKS!
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.license.self_generated.type=basic 
      - xpack.security.enabled=true
    # Note: just like postgres, not mapping a volume so data is reset when you restart
    ports:
      - 9200:9200
  kibana:
    image: docker.elastic.co/kibana/kibana:7.2.0
    container_name: kibana
    ports:
      - 5601:5601
    expose:
      - "5601"
    environment:
      ELASTICSEARCH_HOSTS: "http://es01:9200"
      ELASTICSEARCH_USERNAME: elastic
      ELASTICSEARCH_PASSWORD: QITROCKS!

networks:
  codingblocks:
    external: false
